<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connect 4</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        #game-board {
            background-color: #3b82f6; /* blue-500 */
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-template-rows: repeat(6, 1fr);
            gap: 8px;
            padding: 8px;
            border-radius: 12px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            /* Aspect ratio for the board */
            width: 90vw;
            max-width: 640px;
            aspect-ratio: 7 / 6;
        }
        .cell {
            background-color: #f3f4f6; /* gray-100 */
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s ease;
        }
        .cell.player-r {
            background-color: #ef4444; /* red-500 */
        }
        .cell.player-y {
            background-color: #facc15; /* yellow-400 */
        }
        .winning-cell {
            border: 4px solid #16a34a; /* green-600 */
            transform: scale(1.1);
        }
        /* Column hover effect */
        .column {
            display: contents; /* Allows children to be direct grid items */
        }
        .column-container:hover .cell:not(.player-r):not(.player-y) {
            background-color: #d1d5db; /* gray-300 */
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen py-8">

    <div class="bg-white p-6 sm:p-8 rounded-xl shadow-lg text-center">
        <!-- Game Title -->
        <h1 class="text-3xl sm:text-4xl font-bold text-gray-800 mb-2">Connect 4</h1>

        <!-- Status Display -->
        <div id="status" class="text-xl text-gray-600 mb-6 h-8 flex items-center justify-center">
            <span class="font-bold text-red-500">Red's</span>&nbsp;turn
        </div>

        <!-- Game Board -->
        <div id="game-board-container" class="cursor-pointer">
            <div id="game-board">
                <!-- Cells will be generated by JavaScript -->
            </div>
        </div>

        <!-- Restart Button -->
        <button id="restartButton" class="mt-8 px-6 py-3 bg-blue-500 text-white font-semibold rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition-transform transform hover:scale-105">
            Restart Game
        </button>
    </div>

    <script>
        const gameBoard = document.getElementById('game-board');
        const statusDisplay = document.getElementById('status');
        const restartButton = document.getElementById('restartButton');
        const boardContainer = document.getElementById('game-board-container');

        const ROWS = 6;
        const COLS = 7;

        let gameActive = true;
        let currentPlayer = 'r'; // r for red, y for yellow
        let boardState = Array(ROWS).fill(null).map(() => Array(COLS).fill(null));
        let cells = [];

        // --- Game Initialization ---
        function createBoard() {
            gameBoard.innerHTML = '';
            cells = [];
            for (let r = 0; r < ROWS; r++) {
                const row = [];
                for (let c = 0; c < COLS; c++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.row = r;
                    cell.dataset.col = c;
                    gameBoard.appendChild(cell);
                    row.push(cell);
                }
                cells.push(row);
            }
        }
        
        // --- Game Logic ---
        function handleBoardClick(event) {
            if (!gameActive) return;

            // Determine which column was clicked
            const rect = gameBoard.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const col = Math.floor(x / (rect.width / COLS));
            
            if (col < 0 || col >= COLS) return;

            // Find the first available row in that column
            let row = -1;
            for (let r = ROWS - 1; r >= 0; r--) {
                if (boardState[r][col] === null) {
                    row = r;
                    break;
                }
            }

            if (row === -1) {
                // Column is full
                return;
            }

            // Update state and UI
            boardState[row][col] = currentPlayer;
            cells[row][col].classList.add(`player-${currentPlayer}`);
            
            // Check for win or draw
            if (checkForWin(row, col)) {
                endGame(false);
            } else if (checkForDraw()) {
                endGame(true);
            } else {
                switchPlayer();
            }
        }

        function switchPlayer() {
            currentPlayer = currentPlayer === 'r' ? 'y' : 'r';
            const playerName = currentPlayer === 'r' ? "Red's" : "Yellow's";
            const playerColor = currentPlayer === 'r' ? "text-red-500" : "text-yellow-500";
            statusDisplay.innerHTML = `<span class="font-bold ${playerColor}">${playerName}</span>&nbsp;turn`;
        }
        
        function checkForWin(r, c) {
            const player = boardState[r][c];

            // Horizontal, Vertical, and two Diagonal checks
            const directions = [
                { dr: 0, dc: 1 }, // Horizontal
                { dr: 1, dc: 0 }, // Vertical
                { dr: 1, dc: 1 }, // Diagonal /
                { dr: 1, dc: -1 } // Diagonal \
            ];

            for (const { dr, dc } of directions) {
                let count = 1;
                let winningCells = [{r, c}];

                // Check in one direction
                for (let i = 1; i < 4; i++) {
                    const newR = r + dr * i;
                    const newC = c + dc * i;
                    if (newR >= 0 && newR < ROWS && newC >= 0 && newC < COLS && boardState[newR][newC] === player) {
                        count++;
                        winningCells.push({r: newR, c: newC});
                    } else {
                        break;
                    }
                }

                // Check in the opposite direction
                for (let i = 1; i < 4; i++) {
                    const newR = r - dr * i;
                    const newC = c - dc * i;
                    if (newR >= 0 && newR < ROWS && newC >= 0 && newC < COLS && boardState[newR][newC] === player) {
                        count++;
                        winningCells.push({r: newR, c: newC});
                    } else {
                        break;
                    }
                }

                if (count >= 4) {
                    // Highlight winning cells
                    winningCells.forEach(cell => cells[cell.r][cell.c].classList.add('winning-cell'));
                    return true;
                }
            }
            return false;
        }

        function checkForDraw() {
            // Check if the top row is full
            return boardState[0].every(cell => cell !== null);
        }

        function endGame(isDraw) {
            gameActive = false;
            if (isDraw) {
                statusDisplay.textContent = "It's a draw!";
            } else {
                const playerName = currentPlayer === 'r' ? "Red" : "Yellow";
                const playerColor = currentPlayer === 'r' ? "text-red-500" : "text-yellow-500";
                statusDisplay.innerHTML = `<span class="font-bold ${playerColor}">${playerName}</span> wins!`;
            }
            boardContainer.style.cursor = 'not-allowed';
        }

        function handleRestartGame() {
            gameActive = true;
            currentPlayer = 'r';
            boardState = Array(ROWS).fill(null).map(() => Array(COLS).fill(null));
            createBoard();
            statusDisplay.innerHTML = `<span class="font-bold text-red-500">Red's</span>&nbsp;turn`;
            boardContainer.style.cursor = 'pointer';
        }
        
        // --- Event Listeners ---
        boardContainer.addEventListener('click', handleBoardClick);
        restartButton.addEventListener('click', handleRestartGame);

        // --- Initial Start ---
        handleRestartGame();

    </script>
</body>
</html>
